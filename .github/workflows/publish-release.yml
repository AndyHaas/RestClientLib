name: Post-Release Processing

on:
  workflow_run:
    workflows: ["Build & Bump"]
    types: [completed]

permissions:
  contents: write  # update README and create release
  actions: read    # to fetch artifacts from triggering run

jobs:
  publish:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Set run ID
      id: run_id
      run: |
        echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
        echo "Using run ID: ${{ github.event.workflow_run.id }}"

    - name: Download artifacts from Build & Bump run
      uses: actions/download-artifact@v4
      with:
        # Pull all artifacts from the specified workflow run
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        path: ./artifacts

    - name: Inspect artifacts & derive tag
      id: meta
      run: |
        ls -R artifacts
        VERSION=$(node -p "require('./artifacts/**/package.json').version" | head -1)
        TAG="v$VERSION"
        
        # Extract package version info from release notes if available
        if [ -f "artifacts/**/release_notes.md" ]; then
          PACKAGE_VERSION_ID=$(grep "Package Version ID:" artifacts/**/release_notes.md | sed 's/.*Package Version ID: //' | head -1)
          PRODUCTION_URL=$(grep "Production:" artifacts/**/release_notes.md | sed 's/.*Production: \[.*\](\(.*\))/\1/' | head -1)
          SANDBOX_URL=$(grep "Sandbox:" artifacts/**/release_notes.md | sed 's/.*Sandbox: \[.*\](\(.*\))/\1/' | head -1)
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "package_version_id=$PACKAGE_VERSION_ID" >> $GITHUB_OUTPUT
        echo "production_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT
        echo "sandbox_url=$SANDBOX_URL" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION, tag: $TAG"
        echo "Package Version ID: $PACKAGE_VERSION_ID"

    - name: Checkout repo (to update README)
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Prepare README block
      run: |
        PACKAGE_FILE="REST-API-Library-v${{ steps.meta.outputs.version }}.zip"
        
        {
          echo "<!--LATEST-RELEASE-START-->"
          echo "**Version:** ${{ steps.meta.outputs.version }}  "
          echo "**Tag:** ${{ steps.meta.outputs.tag }}  "
          if [ -n "${{ steps.meta.outputs.package_version_id }}" ]; then
            echo "**Package Version ID:** ${{ steps.meta.outputs.package_version_id }}  "
          fi
          echo "**Package:** [$PACKAGE_FILE](https://github.com/${{ github.repository }}/releases/download/${{ steps.meta.outputs.tag }}/$PACKAGE_FILE)  "
          echo "**Release Date:** $(date -u +"%Y-%m-%d")  "
          echo ""
          if [ -n "${{ steps.meta.outputs.production_url }}" ] && [ -n "${{ steps.meta.outputs.sandbox_url }}" ]; then
            echo "### ðŸš€ Quick Install"
            echo "- **Production:** [${{ steps.meta.outputs.production_url }}](${{ steps.meta.outputs.production_url }}) - Install in production org"
            echo "- **Sandbox:** [${{ steps.meta.outputs.sandbox_url }}](${{ steps.meta.outputs.sandbox_url }}) - Install in sandbox org"
            if [ -n "${{ steps.meta.outputs.package_version_id }}" ]; then
              echo "- **CLI:** \`sf package install --package ${{ steps.meta.outputs.package_version_id }} --wait 10 --installation-key-bypass\`"
            fi
            echo ""
          fi
          echo "<details><summary>Change summary</summary>"
          echo ""
          # Skip first 5 lines (header) from notes if desired:
          awk 'NR>5 {print}' artifacts/**/release_notes.md
          echo "</details>"
          echo "<!--LATEST-RELEASE-END-->"
        } > latest_block.md

        # Update README with the new block
        awk '
          BEGIN{printing=1}
          /<!--LATEST-RELEASE-START-->/ {print; system("cat latest_block.md"); printing=0; next}
          /<!--LATEST-RELEASE-END-->/ {print; printing=1; next}
          printing==1 {print}
        ' README.md > README.md.new

        mv README.md.new README.md
        rm latest_block.md
        echo "Updated README.md with latest release information"

    - name: Commit README update
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions
        GIT_COMMITTER_EMAIL: github-actions@users.noreply.github.com
      run: |
        set -e
        if ! git diff --quiet; then
          git add README.md
          git commit -m "docs: update README for ${{ steps.meta.outputs.tag }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
          echo "Committed README update"
        else
          echo "No README changes to commit"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        name: REST API Library ${{ steps.meta.outputs.tag }}
        body_path: artifacts/**/release_notes.md
        files: |
          artifacts/**/REST-API-Library-v*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "## ðŸ”„ Post-Release Processing Completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ steps.meta.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Release Created" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub release with download links" >> $GITHUB_STEP_SUMMARY
        echo "- README updated with latest release info" >> $GITHUB_STEP_SUMMARY
        echo "- Package zip file attached to release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Package](https://github.com/${{ github.repository }}/releases/download/${{ steps.meta.outputs.tag }}/REST-API-Library-v${{ steps.meta.outputs.version }}.zip)" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ steps.meta.outputs.production_url }}" ]; then
          echo "- [Install in Production](${{ steps.meta.outputs.production_url }})" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ steps.meta.outputs.sandbox_url }}" ]; then
          echo "- [Install in Sandbox](${{ steps.meta.outputs.sandbox_url }})" >> $GITHUB_STEP_SUMMARY
        fi
