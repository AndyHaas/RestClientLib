name: Publish Release

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Build & Bump run ID (optional - will use latest if not provided)'
        required: false
        type: string
  workflow_run:
    workflows: ["Build & Bump"]
    types: [completed]

permissions:
  contents: write  # update README and create release
  actions: read    # to fetch artifacts from triggering run

jobs:
  publish:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest

    steps:
    - name: Install GitHub CLI (for manual runs)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y

    - name: Determine run ID
      id: run_id
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            echo "run_id=${{ github.event.inputs.run_id }}" >> $GITHUB_OUTPUT
          else
            # Get the latest successful Build & Bump run
            RUN_ID=$(gh run list --workflow="build-and-bump.yml" --status=success --limit=1 --json databaseId --jq '.[0].databaseId')
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          fi
        else
          echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
        fi
        echo "Using run ID: ${{ steps.run_id.outputs.run_id }}"

    - name: Download artifacts from Build & Bump run
      uses: actions/download-artifact@v4
      with:
        # Pull all artifacts from the specified workflow run
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        path: ./artifacts

    - name: Inspect artifacts & derive tag
      id: meta
      run: |
        ls -R artifacts
        VERSION=$(node -p "require('./artifacts/**/package.json').version" | head -1)
        TAG="v$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION, tag: $TAG"

    - name: Checkout repo (to update README)
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Prepare README block
      run: |
        PACKAGE_FILE="REST-API-Library-v${{ steps.meta.outputs.version }}.zip"
        
        {
          echo "<!--LATEST-RELEASE-START-->"
          echo "**Version:** ${{ steps.meta.outputs.version }}  "
          echo "**Tag:** ${{ steps.meta.outputs.tag }}  "
          echo "**Package:** [$PACKAGE_FILE](https://github.com/${{ github.repository }}/releases/download/${{ steps.meta.outputs.tag }}/$PACKAGE_FILE)  "
          echo "**Release Date:** $(date -u +"%Y-%m-%d")  "
          echo ""
          echo "<details><summary>Change summary</summary>"
          echo ""
          # Skip first 5 lines (header) from notes if desired:
          awk 'NR>5 {print}' artifacts/**/release_notes.md
          echo "</details>"
          echo "<!--LATEST-RELEASE-END-->"
        } > latest_block.md

        # Update README with the new block
        awk '
          BEGIN{printing=1}
          /<!--LATEST-RELEASE-START-->/ {print; system("cat latest_block.md"); printing=0; next}
          /<!--LATEST-RELEASE-END-->/ {print; printing=1; next}
          printing==1 {print}
        ' README.md > README.md.new

        mv README.md.new README.md
        rm latest_block.md
        echo "Updated README.md with latest release information"

    - name: Commit README update
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions
        GIT_COMMITTER_EMAIL: github-actions@users.noreply.github.com
      run: |
        set -e
        if ! git diff --quiet; then
          git add README.md
          git commit -m "docs: update README for ${{ steps.meta.outputs.tag }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
          echo "Committed README update"
        else
          echo "No README changes to commit"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        name: REST API Library ${{ steps.meta.outputs.tag }}
        body_path: artifacts/**/release_notes.md
        files: |
          artifacts/**/REST-API-Library-v*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "## ðŸš€ Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ steps.meta.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Release Created" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub release with download links" >> $GITHUB_STEP_SUMMARY
        echo "- README updated with latest release info" >> $GITHUB_STEP_SUMMARY
        echo "- Package zip file attached to release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Package](https://github.com/${{ github.repository }}/releases/download/${{ steps.meta.outputs.tag }}/REST-API-Library-v${{ steps.meta.outputs.version }}.zip)" >> $GITHUB_STEP_SUMMARY
