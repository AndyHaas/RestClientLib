name: Build & Bump

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: 'Semver bump type'
        options: [patch, minor, major]
        default: patch
      custom_version:
        description: 'Custom version (optional, overrides bump)'
        required: false
        type: string
      create_release:
        type: boolean
        description: 'Create GitHub release after build'
        default: false

permissions:
  contents: write  # commit version bump + tag
  actions: write   # trigger other workflows

jobs:
  build-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install
    
    - name: Install Salesforce CLI
      run: |
        npm install -g @salesforce/cli
        echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
        sf --version
    
    - name: Auth via JWT (packaging org)
      env:
        SFDX_CLIENT_ID: ${{ secrets.SF_CLIENT_ID }}
        SFDX_JWT_KEY: ${{ secrets.SF_JWT_KEY }}
        SF_USERNAME: ${{ secrets.SF_PACKAGING_USERNAME }}
      run: |
        echo "$SFDX_JWT_KEY" > server.key
        sf org login jwt \
          --client-id "$SFDX_CLIENT_ID" \
          --jwt-key-file server.key \
          --username "$SF_USERNAME" \
          --alias pkgorg --set-default
        rm -f server.key
    
    - name: Read and calculate version
      id: version
      run: |
        # Read current version from package.json
        CUR=$(node -p "require('./package.json').version")
        
        MAJOR=$(echo "$CUR" | cut -d. -f1)
        MINOR=$(echo "$CUR" | cut -d. -f2)
        PATCH=$(echo "$CUR" | cut -d. -f3)
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW="${{ github.event.inputs.custom_version }}"
          echo "Using custom version: $NEW"
        else
          case "${{ github.event.inputs.bump }}" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "current=$CUR" >> $GITHUB_OUTPUT
        echo "new=$NEW" >> $GITHUB_OUTPUT
        echo "tag=v$NEW" >> $GITHUB_OUTPUT
        echo "Current version: $CUR"
        echo "New version: $NEW"
    
    - name: Update package.json version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        npm version $NEW_VERSION --no-git-tag-version
        echo "Updated package.json to version $NEW_VERSION"
    
    - name: Update package.xml version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        API_VERSION=$(echo $NEW_VERSION | cut -d. -f1)
        sed -i "s/<version>.*<\/version>/<version>$API_VERSION.0<\/version>/" manifest/package.xml
        echo "Updated package.xml API version to $API_VERSION.0"
    
    - name: Update sfdx-project.json version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        # Update versionName in sfdx-project.json
        sed -i "s/\"versionName\": \"ver [^\"]*\"/\"versionName\": \"ver $NEW_VERSION\"/" sfdx-project.json
        # Update versionNumber in sfdx-project.json (format: MAJOR.MINOR.PATCH.NEXT)
        sed -i "s/\"versionNumber\": \"[^\"]*\"/\"versionNumber\": \"$NEW_VERSION.NEXT\"/" sfdx-project.json
        echo "Updated sfdx-project.json version to $NEW_VERSION"
    
    - name: Create package
      run: |
        # Create package directory
        mkdir -p package
        
        # Copy source files
        cp -r force-app package/
        cp manifest/package.xml package/
        cp README.md package/
        cp docs/PACKAGE-README.md package/ 2>/dev/null || true
        
        # Create package zip
        cd package
        zip -r ../REST-API-Library-v${{ steps.version.outputs.new }}.zip .
        cd ..
        
        echo "Created REST-API-Library-v${{ steps.version.outputs.new }}.zip"
        
        # Clean up package directory
        rm -rf package
        echo "Cleaned up temporary package directory"
    
    - name: Convert to MDAPI
      run: |
        sf project convert source --root-dir force-app --output-dir mdapi_out
    
    - name: Deploy to packaging org
      run: |
        sf project deploy start --metadata-dir mdapi_out --target-org pkgorg --wait 60 --ignore-conflicts
    
    - name: Build changelog
      run: |
        # Get previous tag
        git fetch --tags --quiet || true
        PREV=$(git tag --sort=-creatordate | head -1)
        
        if [ -n "$PREV" ]; then
          RANGE="$PREV..HEAD"
          COMPARE_LINK="https://github.com/${{ github.repository }}/compare/$PREV...${{ steps.version.outputs.tag }}"
        else
          FIRST=$(git rev-list --max-parents=0 HEAD)
          RANGE="$FIRST..HEAD"
          COMPARE_LINK="https://github.com/${{ github.repository }}/compare/$FIRST...${{ steps.version.outputs.tag }}"
        fi
        
        {
          echo "## Release ${{ steps.version.outputs.tag }}"
          echo
          echo "**Package:** REST-API-Library-v${{ steps.version.outputs.new }}.zip"
          echo "**Previous Version:** ${{ steps.version.outputs.current }}"
          echo
          echo "### Changes"
          if [ -n "$PREV" ]; then
            git log --pretty=format:'- %s (%h) â€” %an' $RANGE
          else
            echo "- Initial release"
          fi
          echo
          echo "[Compare changes](${COMPARE_LINK})"
        } > release_notes.md
        
        echo "Generated changelog from $RANGE"
    
    - name: Commit version changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions
        GIT_COMMITTER_EMAIL: github-actions@users.noreply.github.com
      run: |
        set -e
        git add package.json manifest/package.xml sfdx-project.json
        if ! git diff --quiet --staged; then
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new }}"
        fi
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.new }}"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} "${{ steps.version.outputs.tag }}"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.version.outputs.tag }}
        path: |
          REST-API-Library-v${{ steps.version.outputs.new }}.zip
          release_notes.md
        retention-days: 30
    
    - name: Create GitHub Release (if requested)
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: REST API Library ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: |
          REST-API-Library-v${{ steps.version.outputs.new }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with release info (if requested)
      if: ${{ github.event.inputs.create_release == 'true' }}
      run: |
        PACKAGE_FILE="REST-API-Library-v${{ steps.version.outputs.new }}.zip"
        
        {
          echo "<!--LATEST-RELEASE-START-->"
          echo "**Version:** ${{ steps.version.outputs.new }}  "
          echo "**Tag:** ${{ steps.version.outputs.tag }}  "
          echo "**Package:** [$PACKAGE_FILE](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/$PACKAGE_FILE)  "
          echo "**Release Date:** $(date -u +"%Y-%m-%d")  "
          echo ""
          echo "<details><summary>Change summary</summary>"
          echo ""
          # Skip first 5 lines (header) from notes if desired:
          awk 'NR>5 {print}' release_notes.md
          echo "</details>"
          echo "<!--LATEST-RELEASE-END-->"
        } > latest_block.md

        # Update README with the new block
        awk '
          BEGIN{printing=1}
          /<!--LATEST-RELEASE-START-->/ {print; system("cat latest_block.md"); printing=0; next}
          /<!--LATEST-RELEASE-END-->/ {print; printing=1; next}
          printing==1 {print}
        ' README.md > README.md.new

        mv README.md.new README.md
        rm latest_block.md
        echo "Updated README.md with latest release information"

    - name: Commit README update (if requested)
      if: ${{ github.event.inputs.create_release == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions
        GIT_COMMITTER_EMAIL: github-actions@users.noreply.github.com
      run: |
        set -e
        if ! git diff --quiet; then
          git add README.md
          git commit -m "docs: update README for ${{ steps.version.outputs.tag }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
          echo "Committed README update"
        else
          echo "No README changes to commit"
        fi

    - name: Summary
      run: |
        echo "## ðŸ”¨ Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
        echo "**Previous Version:** ${{ steps.version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type:** ${{ github.event.inputs.bump }}" >> $GITHUB_STEP_SUMMARY
        echo "**Create Release:** ${{ github.event.inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifacts Created" >> $GITHUB_STEP_SUMMARY
        echo "- Package zip file" >> $GITHUB_STEP_SUMMARY
        echo "- Release notes" >> $GITHUB_STEP_SUMMARY
        echo "- Version file" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.create_release }}" == "true" ]; then
          echo "### ðŸ”„ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "âœ… GitHub release created and README updated automatically!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ðŸ”„ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "To create a GitHub release, re-run this workflow with 'Create GitHub release' enabled, or use the 'Publish Release' workflow manually." >> $GITHUB_STEP_SUMMARY
        fi
