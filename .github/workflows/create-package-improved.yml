name: Create Package (No Release)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version'
        required: true
        default: '1.0.0'
        type: string

permissions:
  contents: read
  actions: read

jobs:
  create-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Update VERSION file
      run: |
        echo "${{ github.event.inputs.version }}" > VERSION
        echo "Set version to ${{ github.event.inputs.version }}"
    
    - name: Update package.json version
      run: |
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        echo "Updated package.json to version ${{ github.event.inputs.version }}"
    
    - name: Update package.xml version
      run: |
        API_VERSION=$(echo ${{ github.event.inputs.version }} | cut -d. -f1)
        sed -i "s/<version>.*<\/version>/<version>$API_VERSION.0<\/version>/" manifest/package.xml
        echo "Updated package.xml API version to $API_VERSION.0"
    
    - name: Update script version
      run: |
        sed -i "s/PACKAGE_VERSION=\".*\"/PACKAGE_VERSION=\"${{ github.event.inputs.version }}\"/" scripts/create-package.sh
        echo "Updated create-package.sh version to ${{ github.event.inputs.version }}"
    
    - name: Create package
      run: |
        chmod +x scripts/create-package.sh
        ./scripts/create-package.sh || echo "Package creation completed"
    
    - name: Generate package info
      run: |
        {
          echo "## Package Information"
          echo "**Version:** ${{ github.event.inputs.version }}"
          echo "**Created:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "**Package:** REST-API-Library-v${{ github.event.inputs.version }}.zip"
          echo ""
          echo "### Contents"
          echo "- 9 Apex classes for REST API integration"
          echo "- Named Credential support"
          echo "- Async processing capabilities"
          echo "- Comprehensive testing utilities"
          echo "- Complete documentation"
          echo ""
          echo "### Installation"
          echo "1. Download the package zip file"
          echo "2. Extract the contents"
          echo "3. Deploy to your Salesforce org:"
          echo "   \`\`\`bash"
          echo "   ./deploy.sh"
          echo "   # OR"
          echo "   sf project deploy start --source-dir force-app"
          echo "   \`\`\`"
        } > package_info.md
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: rest-api-library-v${{ github.event.inputs.version }}
        path: |
          REST-API-Library-v*.zip
          package_info.md
          VERSION
        retention-days: 7
    
    - name: Summary
      run: |
        echo "## ðŸ“¦ Package Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Created:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¥ Download" >> $GITHUB_STEP_SUMMARY
        echo "Check the 'Artifacts' section below to download the package zip file." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Package Contents" >> $GITHUB_STEP_SUMMARY
        echo "- REST-API-Library-v${{ github.event.inputs.version }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- package_info.md (installation instructions)" >> $GITHUB_STEP_SUMMARY
        echo "- VERSION file" >> $GITHUB_STEP_SUMMARY
